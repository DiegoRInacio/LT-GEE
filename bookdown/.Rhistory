?list.files
knitr::opts_chunk$set(echo = TRUE)
cdfFiles = list.files('D:\\work\\proj\\ltviz\\meta_test\\figs\\zones\\\cdf', full.names = T)
cdfFiles = list.files('D:\\work\\proj\\ltviz\\meta_test\\figs\\zones\\cdf', full.names = T)
cdfFiles = list.files('D:\\work\\proj\\ltviz\\meta_test\\figs\\zones\\cdf', full.names = T)
cdfFiles
cdfFiles = sort(cdfFiles)
cdfFiles
cdfFiles = sort(cdfFiles)
cdfFiles
?sort
cdfFiles = list.files('D:\\work\\proj\\ltviz\\meta_test\\figs\\zones\\cdf', full.names = T)
cdfFiles = sort(cdfFiles)
for(i in 1:length(files)){
cat(paste0("##### Zone ", as.character(i), "{#zone",as.character(i),"}\n\n"))
cat(paste0("![fig ", as.character(i), "](", files[i], ")\n"))
cat("\n")
}
figsDir = 'D:/work/proj/ltviz/meta_test/figs'
cdf0Files = list.files(figsDir, 'cdf_zero*', recursivefull.names = T)
cdf0Files = list.files(figsDir, 'cdf_zero*', recursive=T, full.names=T)
cdf0Files
cdfFiles = list.files(figsDir, 'cdf_nozero*', recursive=T, full.names=T)
cdfFiles
cdf0Files = list.files(figsDir, 'cdf_zero*.pdf', recursive=T, full.names=T)
cdfFiles = list.files(figsDir, 'cdf_nozero*.pdf', recursive=T, full.names=T)
hist1d0Files = list.files(figsDir, 'hist1d_zero*.pdf', recursive=T, full.names=T)
hist1dFiles = list.files(figsDir, 'hist1d_nozero*.pdf', recursive=T, full.names=T)
hist2d0Files = list.files(figsDir, 'hist2d_zero*.pdf', recursive=T, full.names=T)
hist2dFiles = list.files(figsDir, 'hist2d_nozero*.pdf', recursive=T, full.names=T)
cdf0Files
cdfFiles
cdf0Files = list.files(figsDir, 'cdf_zero*', recursive=T, full.names=T)
cdfFiles = list.files(figsDir, 'cdf_nozero*', recursive=T, full.names=T)
hist1d0Files = list.files(figsDir, 'hist1d_zero*', recursive=T, full.names=T)
hist1dFiles = list.files(figsDir, 'hist1d_nozero*', recursive=T, full.names=T)
hist2d0Files = list.files(figsDir, 'hist2d_zero*', recursive=T, full.names=T)
hist2dFiles = list.files(figsDir, 'hist2d_nozero*', recursive=T, full.names=T)
cdf0Files
cdfFiles
hist1d0Files
hist1dFiles
hist2d0Files
hist2dFiles
file.basename(cdf0Files)
basename(cdf0Files)
?strsep
?sep
?strsplit
zones = strsplit(basename(cdf0Files),'_')
zones
basename(cdf0Files)[0:-4]
substr(basename(cdf0Files)0,-4)
substr(basename(cdf0Files),0,-4)
dirname(substr(basename(cdf0Files)))
getExtension = function(file){
ex = strsplit(basename(file), split="\\.")[[1]]
return(ex[-1])
}
file = cdf0Files[0]
file
cdf0Files
file = cdf0Files[1]
ex = strsplit(basename(file), split="\\.")[[1]]
ex
ex[1]
getExtension = function(file){
ex = strsplit(basename(file), split="\\.")[[1]]
return(ex[1])
}
strsplit(basename(file), split="\\.")[1]
strsplit(basename(file), split="\\.")[[1]][1]
ex = strsplit(strsplit(basename(file), split="\\.")[[1]][1], '_')
ex
ex = strsplit(strsplit(basename(file), split="\\.")[[1]][1], '_')[-1]
ex
strsplit(strsplit(basename(file), split="\\.")[[1]][1], '_')
strsplit(strsplit(basename(file), split="\\.")[[1]][1], '_')[[1]][-1]
ex = strsplit(strsplit(basename(file), split="\\.")[[1]][1], '_')[[1]]
ex
ex = strsplit(strsplit(basename(file), split="\\.")[[1]][1], '_')[[1]][3]
ex
ex = strsplit(strsplit(basename(file), split="\\.")[[1]][1], '_')[[1]][-1]
ex
tail(strsplit(strsplit(basename(file), split="\\.")[[1]][1], '_')[[1]], n=1)
files = cdf0Files
files = cdf0Files
for(i in 1:length(files)){
tmp = tail(strsplit(strsplit(basename(files[i]), split="\\.")[[1]][1], '_')[[1]], n=1)
zone[i] = tmp
}
files = cdf0Files
zone = c()
for(i in 1:length(files)){
tmp = tail(strsplit(strsplit(basename(files[i]), split="\\.")[[1]][1], '_')[[1]], n=1)
zone[i] = tmp
}
zone
files = cdf0Files
zones = c()
for(i in 1:length(files)){
tmp = tail(strsplit(strsplit(basename(files[i]), split="\\.")[[1]][1], '_')[[1]], n=1)
zones[i] = tmp
}
getZone = function(file){
files = cdf0Files
zones = c()
for(i in 1:length(files)){
tmp = tail(strsplit(strsplit(basename(files[i]), split="\\.")[[1]][1], '_')[[1]], n=1)
zones[i] = tmp
}
return(zones)
}
getZone = function(files){
zones = c()
for(i in 1:length(files)){
tmp = tail(strsplit(strsplit(basename(files[i]), split="\\.")[[1]][1], '_')[[1]], n=1)
zones[i] = tmp
}
return(zones)
}
zonesEx = getZone(cdf0Files)
getZone = function(files){
zones = c()
for(i in 1:length(files)){
tmp = tail(strsplit(strsplit(basename(files[i]), split="\\.")[[1]][1], '_')[[1]], n=1)
zones[i] = tmp
}
return(as.numeric(zones))
}
zonesEx = getZone(cdf0Files)
zonesEx
zonesEx = order(getZone(cdf0Files))
zonesEx
figsDir = 'D:/work/proj/ltviz/meta_test/figs'
cdf0Files = sort(list.files(figsDir, 'cdf_zero*', recursive=T, full.names=T))
cdfFiles = sort(list.files(figsDir, 'cdf_nozero*', recursive=T, full.names=T))
hist1d0Files = sort(list.files(figsDir, 'hist1d_zero*', recursive=T, full.names=T))
hist1dFiles = sort(list.files(figsDir, 'hist1d_nozero*', recursive=T, full.names=T))
hist2d0Files = sort(list.files(figsDir, 'hist2d_zero*', recursive=T, full.names=T))
hist2dFiles = sort(list.files(figsDir, 'hist2d_nozero*', recursive=T, full.names=T))
zonesIndex = order(getZone(cdf0Files))
cdf0Files = cdf0Files[zonesIndex]
cdfFiles = cdfFiles[zonesIndex]
hist1d0Files = hist1d0Files[zonesIndex]
hist1dFiles = hist1dFiles[zonesIndex]
hist2d0Files = hist2d0Files[zonesIndex]
hist2dFiles = hist2dFiles[zonesIndex]
mapFiles = sort(list.files(figsDir, 'map*', recursive=T, full.names=T))
mapFiles
cdf0Files = normalizePath(cdf0Files[zonesIndex], winslash='/')
cdfFiles = normalizePath(cdfFiles[zonesIndex], winslash='/')
hist1d0Files = normalizePath(hist1d0Files[zonesIndex], winslash='/')
hist1dFiles = normalizePath(hist1dFiles[zonesIndex], winslash='/')
hist2d0Files = normalizePath(hist2d0Files[zonesIndex], winslash='/')
hist2dFiles = normalizePath(hist2dFiles[zonesIndex], winslash='/')
mapFiles = normalizePath(mapFiles[zonesIndex], winslash='/')
mapFiles
zones = getZone(cdf0Files)
zonesIndex = order(zones)
zones = zones[zonesIndex]
cdf0Files = normalizePath(cdf0Files[zonesIndex], winslash='/')
cdfFiles = normalizePath(cdfFiles[zonesIndex], winslash='/')
hist1d0Files = normalizePath(hist1d0Files[zonesIndex], winslash='/')
hist1dFiles = normalizePath(hist1dFiles[zonesIndex], winslash='/')
hist2d0Files = normalizePath(hist2d0Files[zonesIndex], winslash='/')
hist2dFiles = normalizePath(hist2dFiles[zonesIndex], winslash='/')
mapFiles = normalizePath(mapFiles[zonesIndex], winslash='/')
mapFiles
hist2dFiles
hist2d0Files
hist1dFiles
hist1d0Files
cdfFiles
cdf0Files
zones
H<return>
setwd("D:/work/code_library/LT-GEE/bookdown")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
files = list.files('../docs', '.html', full.names = T)
trackingLines = c(
'<!-- Global site tag (gtag.js) - Google Analytics -->',
'<script async src="https://www.googletagmanager.com/gtag/js?id=UA-120674089-1"></script>',
'<script>',
'window.dataLayer = window.dataLayer || [];',
'function gtag(){dataLayer.push(arguments);}',
'gtag(\'js\', new Date());',
'gtag(\'config\', \'UA-120674089-1\');',
'</script>'
)
for(thisFile in files){
lines = readLines(thisFile)
part1 = lines[1:43]
part2 = lines[44:length(lines)]
newLines = c(part1, trackingLines, part2)
writeLines(newLines, thisFile)
}
bookdown::render_book("index.Rmd", "bookdown::gitbook")
files = list.files('../docs', '.html', full.names = T)
trackingLines = c(
'<!-- Global site tag (gtag.js) - Google Analytics -->',
'<script async src="https://www.googletagmanager.com/gtag/js?id=UA-120674089-1"></script>',
'<script>',
'window.dataLayer = window.dataLayer || [];',
'function gtag(){dataLayer.push(arguments);}',
'gtag(\'js\', new Date());',
'gtag(\'config\', \'UA-120674089-1\');',
'</script>'
)
for(thisFile in files){
lines = readLines(thisFile)
part1 = lines[1:43]
part2 = lines[44:length(lines)]
newLines = c(part1, trackingLines, part2)
writeLines(newLines, thisFile)
}
knitr::opts_chunk$set(echo = TRUE)
u"\u03BC"
"\U00B5"
'Mean absolute error (\U00B5AE)'
'Mean absolute error (\U00B5 AE)'
paste0('Mean absolute error (\U00B5','AE)'
paste0('Mean absolute error (\U00B5','AE)'
paste0('Mean absolute error (\U00B5','AE)
paste0('Mean absolute error (\U00B5','AE')
\begin{table}[]
\begin{tabular}{lllll}
\hline
& \textbf{Zero Included} & \textbf{Zero Excluded} &  &  \\ \hline
\multicolumn{1}{|l|}{\textbf{r}} & \multicolumn{1}{l|}{0.87} & \multicolumn{1}{l|}{0.76} & \multicolumn{1}{l|}{} & \multicolumn{1}{l|}{} \\ \hline
\multicolumn{1}{|l|}{\textbf{MAE}} & \multicolumn{1}{l|}{4} & \multicolumn{1}{l|}{15} & \multicolumn{1}{l|}{} & \multicolumn{1}{l|}{} \\ \hline
\textbf{UAE} & 13.6 & 19.1 &  &  \\ \hline
\end{tabular}
\end{table}
library(colormap)
colormap(colormaps$magma, format='rgb', nshades=11) # impervious
