cnames = colnames(data)
these = which((cnames %in% c('lon', 'lat')) == FALSE)
yearData = data[,these]
colnames(yearData) = substr(cnames[these],3,6)
data$bin2017 = cut(rowMeans(yearData, na.rm = TRUE, dims = 1), breaks = c(0, 100, 200, 300, 400, 1000))  #data$X_2017_mean
pal2017 = colorFactor(c('#ffffcc','#c2e699','#78c679','#31a354', '#006837'), domain=data$bin2017)
data$binDif = cut((data$X_2017_mean - data$X_1984_mean), breaks = c(-500, -50, -25, -10, 10, 25, 50, 100, 500))
palDif = colorFactor(c('#dfc27d','#f6e8c3','white','#edf8fb', '#b2e2e2', '#66c2a4', '#2ca25f', '#006d2c'), domain=data$binDif)
coords = data[,c('lon', 'lat')]
spData = SpatialPointsDataFrame(coords, data)
spYears = SpatialPointsDataFrame(coords, yearData)
# Define UI ----
ui <- fluidPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
sidebarLayout(
position = "right",
sidebarPanel(
tags$style(type = "text/css", "#plot {height: calc(90vh) !important;}"),
plotOutput("plot")
),
mainPanel(
tags$style(type = "text/css", "#mymap {height: calc(90vh) !important;}"),
leafletOutput("mymap")
)
)
)
# Define server logic ----
server <- function(input, output) {
output$mymap <- renderLeaflet({
leaflet() %>%
#setView(0,0,2) %>%
addProviderTiles("Esri.WorldImagery", group="Imagery") %>%
addProviderTiles("Esri.WorldTopoMap", group="Places") %>%
addCircleMarkers(
data=spData,lat=~lat,lng=~lon, color=~pal2017(bin2017), weight = 0, radius = 7, opacity = 1, fillOpacity = 1, group = 'Points Mean',
clusterOptions = markerClusterOptions(disableClusteringAtZoom=6, showCoverageOnHover = FALSE, freezeAtZoom = FALSE)) %>%
addCircleMarkers(
data=spData,lat=~lat,lng=~lon, color=~palDif(binDif), weight = 0, radius = 7, opacity = 1, fillOpacity = 1, group = 'Points Dif',
clusterOptions = markerClusterOptions(disableClusteringAtZoom=6, showCoverageOnHover = FALSE, freezeAtZoom = FALSE)) %>%
addDrawToolbar(
targetGroup='Draw',
polylineOptions=FALSE,
markerOptions = FALSE,
circleOptions = TRUE,
circleMarkerOptions = FALSE,
singleFeature = TRUE)  %>%
addLayersControl(
baseGroups = c("Imagery", "Places"),
overlayGroups = c("Draw", "Points 2017", "Points Dif"),
options = layersControlOptions(collapsed=FALSE))
})
#output$plot<-renderPlot({
#  ggplot(data=iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(aes(color=Species, shape=Species))})
output$plot <- renderPlot({
#use the draw_stop event to detect when users finished drawing
req(input$mymap_draw_stop)
#print(input$mymap_draw_new_feature)
feature_type <- input$mymap_draw_new_feature$properties$feature_type
if(feature_type %in% c("rectangle","polygon")) {
#get the coordinates of the polygon
polygon_coordinates <- input$mymap_draw_new_feature$geometry$coordinates[[1]]
#transform them to an sp Polygon
drawn_polygon <- Polygon(do.call(rbind,lapply(polygon_coordinates,function(x){c(x[[1]][1],x[[2]][1])})))
#use over from the sp package to identify selected cities
selected <- spYears %over% SpatialPolygons(list(Polygons(list(drawn_polygon),"drawn_polygon")))
#print the name of the cities
theseSPYears = spYears[which(!is.na(selected)),]
} else if(feature_type=="circle") {
#get the coordinates of the center of the cirle
center_coords <- matrix(c(input$mymap_draw_new_feature$geometry$coordinates[[1]],input$mymap_draw_new_feature$geometry$coordinates[[2]]),ncol=2)
#calculate the distance of the cities to the center
dist_to_center <- spDistsN1(spYears,center_coords,longlat=TRUE)
#select the cities that are closer to the center than the radius of the circle
theseSPYears <- spYears[dist_to_center < input$mymap_draw_new_feature$properties$radius/1000,]
}
g = gather(theseSPYears@data, 'year', 'biomass')
ggplot(g, aes(year, biomass))+geom_boxplot()+coord_flip()
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
library(shiny)
library(leaflet)
library(leaflet.extras)
library(sp)
library(ggplot2)
library(tidyr)
dataFile = "D:\\work\\proj\\conus_biomass\\data\\biomass_mean_hex.csv"
data = read.csv(dataFile)
cnames = colnames(data)
these = which((cnames %in% c('lon', 'lat')) == FALSE)
yearData = data[,these]
colnames(yearData) = substr(cnames[these],3,6)
data$bin2017 = cut(rowMeans(yearData, na.rm = TRUE, dims = 1), breaks = c(0, 100, 200, 300, 400, 1000))  #data$X_2017_mean
pal2017 = colorFactor(c('#ffffcc','#c2e699','#78c679','#31a354', '#006837'), domain=data$bin2017)
data$binDif = cut((data$X_2017_mean - data$X_1984_mean), breaks = c(-500, -50, -25, -10, 10, 25, 50, 100, 500))
palDif = colorFactor(c('#dfc27d','#f6e8c3','white','#edf8fb', '#b2e2e2', '#66c2a4', '#2ca25f', '#006d2c'), domain=data$binDif)
coords = data[,c('lon', 'lat')]
spData = SpatialPointsDataFrame(coords, data)
spYears = SpatialPointsDataFrame(coords, yearData)
# Define UI ----
ui <- fluidPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
sidebarLayout(
position = "right",
sidebarPanel(
tags$style(type = "text/css", "#plot {height: calc(90vh) !important;}"),
plotOutput("plot")
),
mainPanel(
tags$style(type = "text/css", "#mymap {height: calc(90vh) !important;}"),
leafletOutput("mymap")
)
)
)
# Define server logic ----
server <- function(input, output) {
output$mymap <- renderLeaflet({
leaflet() %>%
#setView(0,0,2) %>%
addProviderTiles("Esri.WorldImagery", group="Imagery") %>%
addProviderTiles("Esri.WorldTopoMap", group="Places") %>%
addCircleMarkers(
data=spData,lat=~lat,lng=~lon, color=~pal2017(bin2017), weight = 0, radius = 7, opacity = 1, fillOpacity = 1, group = 'Points Mean',
clusterOptions = markerClusterOptions(disableClusteringAtZoom=6, showCoverageOnHover = FALSE, freezeAtZoom = FALSE)) %>%
addCircleMarkers(
data=spData,lat=~lat,lng=~lon, color=~palDif(binDif), weight = 0, radius = 7, opacity = 1, fillOpacity = 1, group = 'Points Dif',
clusterOptions = markerClusterOptions(disableClusteringAtZoom=6, showCoverageOnHover = FALSE, freezeAtZoom = FALSE)) %>%
addDrawToolbar(
targetGroup='Draw',
polylineOptions=FALSE,
markerOptions = FALSE,
circleOptions = TRUE,
circleMarkerOptions = FALSE,
singleFeature = TRUE)  %>%
addLayersControl(
baseGroups = c("Imagery", "Places"),
overlayGroups = c("Draw", "Points Mean", "Points Dif"),
options = layersControlOptions(collapsed=FALSE))
})
#output$plot<-renderPlot({
#  ggplot(data=iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(aes(color=Species, shape=Species))})
output$plot <- renderPlot({
#use the draw_stop event to detect when users finished drawing
req(input$mymap_draw_stop)
#print(input$mymap_draw_new_feature)
feature_type <- input$mymap_draw_new_feature$properties$feature_type
if(feature_type %in% c("rectangle","polygon")) {
#get the coordinates of the polygon
polygon_coordinates <- input$mymap_draw_new_feature$geometry$coordinates[[1]]
#transform them to an sp Polygon
drawn_polygon <- Polygon(do.call(rbind,lapply(polygon_coordinates,function(x){c(x[[1]][1],x[[2]][1])})))
#use over from the sp package to identify selected cities
selected <- spYears %over% SpatialPolygons(list(Polygons(list(drawn_polygon),"drawn_polygon")))
#print the name of the cities
theseSPYears = spYears[which(!is.na(selected)),]
} else if(feature_type=="circle") {
#get the coordinates of the center of the cirle
center_coords <- matrix(c(input$mymap_draw_new_feature$geometry$coordinates[[1]],input$mymap_draw_new_feature$geometry$coordinates[[2]]),ncol=2)
#calculate the distance of the cities to the center
dist_to_center <- spDistsN1(spYears,center_coords,longlat=TRUE)
#select the cities that are closer to the center than the radius of the circle
theseSPYears <- spYears[dist_to_center < input$mymap_draw_new_feature$properties$radius/1000,]
}
g = gather(theseSPYears@data, 'year', 'biomass')
ggplot(g, aes(year, biomass))+geom_boxplot()+coord_flip()
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
hist(rowMeans(yearData, na.rm = TRUE, dims = 1))
library(shiny)
library(leaflet)
library(leaflet.extras)
library(sp)
library(ggplot2)
library(tidyr)
dataFile = "D:\\work\\proj\\conus_biomass\\data\\biomass_mean_hex.csv"
data = read.csv(dataFile)
cnames = colnames(data)
these = which((cnames %in% c('lon', 'lat')) == FALSE)
yearData = data[,these]
colnames(yearData) = substr(cnames[these],3,6)
hist(rowMeans(yearData, na.rm = TRUE, dims = 1))
data$bin2017 = cut(rowMeans(yearData, na.rm = TRUE, dims = 1), breaks = c(0, 25, 50, 100, 200, 1000))  #data$X_2017_mean
pal2017 = colorFactor(c('#ffffcc','#c2e699','#78c679','#31a354', '#006837'), domain=data$bin2017)
data$binDif = cut((data$X_2017_mean - data$X_1984_mean), breaks = c(-500, -50, -25, -10, 10, 25, 50, 100, 500))
palDif = colorFactor(c('#dfc27d','#f6e8c3','white','#edf8fb', '#b2e2e2', '#66c2a4', '#2ca25f', '#006d2c'), domain=data$binDif)
coords = data[,c('lon', 'lat')]
spData = SpatialPointsDataFrame(coords, data)
spYears = SpatialPointsDataFrame(coords, yearData)
# Define UI ----
ui <- fluidPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
sidebarLayout(
position = "right",
sidebarPanel(
tags$style(type = "text/css", "#plot {height: calc(90vh) !important;}"),
plotOutput("plot")
),
mainPanel(
tags$style(type = "text/css", "#mymap {height: calc(90vh) !important;}"),
leafletOutput("mymap")
)
)
)
# Define server logic ----
server <- function(input, output) {
output$mymap <- renderLeaflet({
leaflet() %>%
#setView(0,0,2) %>%
addProviderTiles("Esri.WorldImagery", group="Imagery") %>%
addProviderTiles("Esri.WorldTopoMap", group="Places") %>%
addCircleMarkers(
data=spData,lat=~lat,lng=~lon, color=~pal2017(bin2017), weight = 0, radius = 7, opacity = 1, fillOpacity = 1, group = 'Points Mean',
clusterOptions = markerClusterOptions(disableClusteringAtZoom=6, showCoverageOnHover = FALSE, freezeAtZoom = FALSE)) %>%
addCircleMarkers(
data=spData,lat=~lat,lng=~lon, color=~palDif(binDif), weight = 0, radius = 7, opacity = 1, fillOpacity = 1, group = 'Points Dif',
clusterOptions = markerClusterOptions(disableClusteringAtZoom=6, showCoverageOnHover = FALSE, freezeAtZoom = FALSE)) %>%
addDrawToolbar(
targetGroup='Draw',
polylineOptions=FALSE,
markerOptions = FALSE,
circleOptions = TRUE,
circleMarkerOptions = FALSE,
singleFeature = TRUE)  %>%
addLayersControl(
baseGroups = c("Imagery", "Places"),
overlayGroups = c("Draw", "Points Mean", "Points Dif"),
options = layersControlOptions(collapsed=FALSE))
})
#output$plot<-renderPlot({
#  ggplot(data=iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(aes(color=Species, shape=Species))})
output$plot <- renderPlot({
#use the draw_stop event to detect when users finished drawing
req(input$mymap_draw_stop)
#print(input$mymap_draw_new_feature)
feature_type <- input$mymap_draw_new_feature$properties$feature_type
if(feature_type %in% c("rectangle","polygon")) {
#get the coordinates of the polygon
polygon_coordinates <- input$mymap_draw_new_feature$geometry$coordinates[[1]]
#transform them to an sp Polygon
drawn_polygon <- Polygon(do.call(rbind,lapply(polygon_coordinates,function(x){c(x[[1]][1],x[[2]][1])})))
#use over from the sp package to identify selected cities
selected <- spYears %over% SpatialPolygons(list(Polygons(list(drawn_polygon),"drawn_polygon")))
#print the name of the cities
theseSPYears = spYears[which(!is.na(selected)),]
} else if(feature_type=="circle") {
#get the coordinates of the center of the cirle
center_coords <- matrix(c(input$mymap_draw_new_feature$geometry$coordinates[[1]],input$mymap_draw_new_feature$geometry$coordinates[[2]]),ncol=2)
#calculate the distance of the cities to the center
dist_to_center <- spDistsN1(spYears,center_coords,longlat=TRUE)
#select the cities that are closer to the center than the radius of the circle
theseSPYears <- spYears[dist_to_center < input$mymap_draw_new_feature$properties$radius/1000,]
}
g = gather(theseSPYears@data, 'year', 'biomass')
ggplot(g, aes(year, biomass))+geom_boxplot()+coord_flip()
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
library(shiny)
library(leaflet)
library(leaflet.extras)
library(sp)
library(ggplot2)
library(tidyr)
dataFile = "D:\\work\\proj\\conus_biomass\\data\\biomass_mean_hex.csv"
data = read.csv(dataFile)
cnames = colnames(data)
these = which((cnames %in% c('lon', 'lat')) == FALSE)
yearData = data[,these]
colnames(yearData) = substr(cnames[these],3,6)
hist(rowMeans(yearData, na.rm = TRUE, dims = 1))
data$bin2017 = cut(rowMeans(yearData, na.rm = TRUE, dims = 1), breaks = c(0, 25, 50, 100, 200, 1000))  #data$X_2017_mean
pal2017 = colorFactor(c('#ffffcc','#c2e699','#78c679','#31a354', '#006837'), domain=data$bin2017)
data$binDif = cut((data$X_2017_mean - data$X_1984_mean), breaks = c(-500, -50, -25, -10, 10, 25, 50, 100, 500))
palDif = colorFactor(c('#dfc27d','#f6e8c3','white','#edf8fb', '#b2e2e2', '#66c2a4', '#2ca25f', '#006d2c'), domain=data$binDif)
coords = data[,c('lon', 'lat')]
spData = SpatialPointsDataFrame(coords, data)
spYears = SpatialPointsDataFrame(coords, yearData)
# Define UI ----
ui <- fluidPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
sidebarLayout(
position = "right",
sidebarPanel(
tags$style(type = "text/css", "#plot {height: calc(90vh) !important;}"),
plotOutput("plot")
),
mainPanel(
tags$style(type = "text/css", "#mymap {height: calc(90vh) !important;}"),
leafletOutput("mymap")
)
)
)
# Define server logic ----
server <- function(input, output) {
output$mymap <- renderLeaflet({
leaflet() %>%
#setView(0,0,2) %>%
addProviderTiles("Esri.WorldImagery", group="Imagery") %>%
addProviderTiles("Esri.WorldTopoMap", group="Places") %>%
addCircleMarkers(
data=spData,lat=~lat,lng=~lon, color=~palDif(binDif), weight = 0, radius = 7, opacity = 1, fillOpacity = 1, group = 'Points Dif',
clusterOptions = markerClusterOptions(disableClusteringAtZoom=6, showCoverageOnHover = FALSE, freezeAtZoom = FALSE)) %>%
addCircleMarkers(
data=spData,lat=~lat,lng=~lon, color=~pal2017(bin2017), weight = 0, radius = 7, opacity = 1, fillOpacity = 1, group = 'Points Mean',
clusterOptions = markerClusterOptions(disableClusteringAtZoom=6, showCoverageOnHover = FALSE, freezeAtZoom = FALSE)) %>%
addDrawToolbar(
targetGroup='Draw',
polylineOptions=FALSE,
markerOptions = FALSE,
circleOptions = TRUE,
circleMarkerOptions = FALSE,
singleFeature = TRUE)  %>%
addLayersControl(
baseGroups = c("Imagery", "Places"),
overlayGroups = c("Draw", "Points Mean", "Points Dif"),
options = layersControlOptions(collapsed=FALSE))
})
#output$plot<-renderPlot({
#  ggplot(data=iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(aes(color=Species, shape=Species))})
output$plot <- renderPlot({
#use the draw_stop event to detect when users finished drawing
req(input$mymap_draw_stop)
#print(input$mymap_draw_new_feature)
feature_type <- input$mymap_draw_new_feature$properties$feature_type
if(feature_type %in% c("rectangle","polygon")) {
#get the coordinates of the polygon
polygon_coordinates <- input$mymap_draw_new_feature$geometry$coordinates[[1]]
#transform them to an sp Polygon
drawn_polygon <- Polygon(do.call(rbind,lapply(polygon_coordinates,function(x){c(x[[1]][1],x[[2]][1])})))
#use over from the sp package to identify selected cities
selected <- spYears %over% SpatialPolygons(list(Polygons(list(drawn_polygon),"drawn_polygon")))
#print the name of the cities
theseSPYears = spYears[which(!is.na(selected)),]
} else if(feature_type=="circle") {
#get the coordinates of the center of the cirle
center_coords <- matrix(c(input$mymap_draw_new_feature$geometry$coordinates[[1]],input$mymap_draw_new_feature$geometry$coordinates[[2]]),ncol=2)
#calculate the distance of the cities to the center
dist_to_center <- spDistsN1(spYears,center_coords,longlat=TRUE)
#select the cities that are closer to the center than the radius of the circle
theseSPYears <- spYears[dist_to_center < input$mymap_draw_new_feature$properties$radius/1000,]
}
g = gather(theseSPYears@data, 'year', 'biomass')
ggplot(g, aes(year, biomass))+geom_boxplot()+coord_flip()
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
library(shiny)
library(leaflet)
library(leaflet.extras)
library(sp)
library(ggplot2)
library(tidyr)
dataFile = "D:\\work\\proj\\conus_biomass\\data\\biomass_mean_hex.csv"
data = read.csv(dataFile)
cnames = colnames(data)
these = which((cnames %in% c('lon', 'lat')) == FALSE)
yearData = data[,these]
colnames(yearData) = substr(cnames[these],3,6)
hist(rowMeans(yearData, na.rm = TRUE, dims = 1))
data$bin2017 = cut(rowMeans(yearData, na.rm = TRUE, dims = 1), breaks = c(0, 25, 50, 100, 200, 1000))  #data$X_2017_mean
pal2017 = colorFactor(c('#ffffcc','#c2e699','#78c679','#31a354', '#006837'), domain=data$bin2017)
data$binDif = cut((data$X_2017_mean - data$X_1984_mean), breaks = c(-500, -50, -25, -10, 10, 25, 50, 100, 500))
palDif = colorFactor(c('#dfc27d','#f6e8c3','white','#edf8fb', '#b2e2e2', '#66c2a4', '#2ca25f', '#006d2c'), domain=data$binDif)
coords = data[,c('lon', 'lat')]
spData = SpatialPointsDataFrame(coords, data)
spYears = SpatialPointsDataFrame(coords, yearData)
# Define UI ----
ui <- fluidPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
sidebarLayout(
position = "right",
sidebarPanel(
"Draw shapes to summarize biomass TS",
tags$style(type = "text/css", "#plot {height: calc(90vh) !important;}"),
plotOutput("plot")
),
mainPanel(
tags$style(type = "text/css", "#mymap {height: calc(90vh) !important;}"),
leafletOutput("mymap")
)
)
)
# Define server logic ----
server <- function(input, output) {
output$mymap <- renderLeaflet({
leaflet() %>%
#setView(0,0,2) %>%
addProviderTiles("Esri.WorldImagery", group="Imagery") %>%
addProviderTiles("Esri.WorldTopoMap", group="Places") %>%
addCircleMarkers(
data=spData,lat=~lat,lng=~lon, color=~palDif(binDif), weight = 0, radius = 7, opacity = 1, fillOpacity = 1, group = 'Points Dif',
clusterOptions = markerClusterOptions(disableClusteringAtZoom=6, showCoverageOnHover = FALSE, freezeAtZoom = FALSE)) %>%
addCircleMarkers(
data=spData,lat=~lat,lng=~lon, color=~pal2017(bin2017), weight = 0, radius = 7, opacity = 1, fillOpacity = 1, group = 'Points Mean',
clusterOptions = markerClusterOptions(disableClusteringAtZoom=6, showCoverageOnHover = FALSE, freezeAtZoom = FALSE)) %>%
addDrawToolbar(
targetGroup='Draw',
polylineOptions=FALSE,
markerOptions = FALSE,
circleOptions = TRUE,
circleMarkerOptions = FALSE,
singleFeature = TRUE)  %>%
addLayersControl(
baseGroups = c("Imagery", "Places"),
overlayGroups = c("Draw", "Points Mean", "Points Dif"),
options = layersControlOptions(collapsed=FALSE))
})
#output$plot<-renderPlot({
#  ggplot(data=iris, aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(aes(color=Species, shape=Species))})
output$plot <- renderPlot({
#use the draw_stop event to detect when users finished drawing
req(input$mymap_draw_stop)
#print(input$mymap_draw_new_feature)
feature_type <- input$mymap_draw_new_feature$properties$feature_type
if(feature_type %in% c("rectangle","polygon")) {
#get the coordinates of the polygon
polygon_coordinates <- input$mymap_draw_new_feature$geometry$coordinates[[1]]
#transform them to an sp Polygon
drawn_polygon <- Polygon(do.call(rbind,lapply(polygon_coordinates,function(x){c(x[[1]][1],x[[2]][1])})))
#use over from the sp package to identify selected cities
selected <- spYears %over% SpatialPolygons(list(Polygons(list(drawn_polygon),"drawn_polygon")))
#print the name of the cities
theseSPYears = spYears[which(!is.na(selected)),]
} else if(feature_type=="circle") {
#get the coordinates of the center of the cirle
center_coords <- matrix(c(input$mymap_draw_new_feature$geometry$coordinates[[1]],input$mymap_draw_new_feature$geometry$coordinates[[2]]),ncol=2)
#calculate the distance of the cities to the center
dist_to_center <- spDistsN1(spYears,center_coords,longlat=TRUE)
#select the cities that are closer to the center than the radius of the circle
theseSPYears <- spYears[dist_to_center < input$mymap_draw_new_feature$properties$radius/1000,]
}
g = gather(theseSPYears@data, 'year', 'biomass')
ggplot(g, aes(year, biomass))+geom_boxplot()+coord_flip()
})
}
# Run the app ----
shinyApp(ui = ui, server = server)
install.packages('rsconnect')
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='emapr',
token='20C41EC385F5D9E4CD4B37495294A0B0',
secret='WXvDmP7Sfblnzdm6JkPkN4CcAGSflBQnRnjQS9vP')
library(tidyverse)
bmF = "D:\\work\\proj\\forestSAT2018\\data\\hexagons_conus_albers_30km_with_id_biomassfiaald_20180708_0859_error.csv"
ccF = "D:\\work\\proj\\forestSAT2018\\data\\hexagons_conus_albers_30km_with_id_canopy_20180915_1631_error.csv"
bmD = read_csv(bmF)
ccD = read_csv(ccF)
df = inner_join(bmD, ccD, by='id')
head(df)
p = ggplot(df, aes(mae.x, mae.y)) +
geom_point()
p
library(colormap)
colormaps()
colormaps
colormap(colormaps$magma, format='rgb',nshades=10)
colormap(colormaps$magma, format='rgb',nshades=11)
colormap(colormaps$magma, 'rgb', 10)
colormap(colormaps$magma, format='rgb',nshades=10)
scales::show_col(colormap(colormaps$magma, format='rgb',nshades=10))
scales::show_col(colormap(colormaps$magma ,nshades=10))
scales::show_col(colormap(colormaps$magma ,nshades=12))
colormap(colormaps$magma, format='rgb', nshades=10)
colormap(colormaps$viridis, format='rgb', nshades=11) # biomass
colormap(colormaps$YlGnBu, format='rgb', nshades=11) # biomass
colormap(colormaps$YIGnBu, format='rgb', nshades=11) # biomass
colormap(colormaps$velocity_green, format='rgb', nshades=11) # canopy cover
setwd("D:/work/code_library/LT-GEE/bookdown")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
files = list.files('../docs', '.html', full.names = T)
trackingLines = c(
'<!-- Global site tag (gtag.js) - Google Analytics -->',
'<script async src="https://www.googletagmanager.com/gtag/js?id=UA-120674089-1"></script>',
'<script>',
'window.dataLayer = window.dataLayer || [];',
'function gtag(){dataLayer.push(arguments);}',
'gtag(\'js\', new Date());',
'gtag(\'config\', \'UA-120674089-1\');',
'</script>'
)
for(thisFile in files){
lines = readLines(thisFile)
part1 = lines[1:43]
part2 = lines[44:length(lines)]
newLines = c(part1, trackingLines, part2)
writeLines(newLines, thisFile)
}
bookdown::render_book("index.Rmd", "bookdown::gitbook")
files = list.files('../docs', '.html', full.names = T)
trackingLines = c(
'<!-- Global site tag (gtag.js) - Google Analytics -->',
'<script async src="https://www.googletagmanager.com/gtag/js?id=UA-120674089-1"></script>',
'<script>',
'window.dataLayer = window.dataLayer || [];',
'function gtag(){dataLayer.push(arguments);}',
'gtag(\'js\', new Date());',
'gtag(\'config\', \'UA-120674089-1\');',
'</script>'
)
for(thisFile in files){
lines = readLines(thisFile)
part1 = lines[1:43]
part2 = lines[44:length(lines)]
newLines = c(part1, trackingLines, part2)
writeLines(newLines, thisFile)
}
